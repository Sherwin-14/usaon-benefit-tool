{% macro add_javascript__highcharts(sankey_series, assessment) -%}
  <script>
    // TODO: const or var for compatibility?
    const pointClickHandler = function(event) {
      const point = this;
      if ([point.id, point.from].includes("{{ constants.DUMMY_NODE_ID }}")) {
        console.debug("Ignoring click on dummy node/link");
        return;
      }

      const selector = "#form-modal";
      const el = document.querySelector(selector);

      // Determine the target URL and set the hx-get parameter accordingly.
      // We're using vendored Flask-JSGlue to do this from JS.
      // TODO: Less magic string processing
      const isNode = "type" in point;
      let routeTarget, idArgName, idArgValue;
      if (isNode) {
        routeTarget = "assessment.node.form";
        idArgName = "node_id";
        // FIXME: Brittle!
        idArgValue = point.id.split("_").slice(-1)[0];
      } else {
        routeTarget = "assessment.link.form";
        idArgName = "link_id";
        idArgValue = point.id;
      }
      const targetUrl = Flask.url_for(
        routeTarget,
        {
          assessment_id: {{ assessment.id }},
          [idArgName]: idArgValue,
        },
      );
      el.setAttribute("hx-get", targetUrl);
      // Make HTMX aware of the change we just made
      htmx.process(el);

      const modal = new bootstrap.Modal(el, {});
      modal.show();
      htmx.trigger(selector, "modalOpened");
    }

    // Add a "download" symbol
    // From: https://api.highcharts.com/highcharts/exporting.buttons.contextButton.symbol
    Highcharts.SVGRenderer.prototype.symbols.download = function (x, y, w, h) {
      const path = [
        // Arrow stem
        'M', x + w * 0.5, y,
        'L', x + w * 0.5, y + h * 0.7,
        // Arrow head
        'M', x + w * 0.3, y + h * 0.5,
        'L', x + w * 0.5, y + h * 0.7,
        'L', x + w * 0.7, y + h * 0.5,
        // Box
        'M', x, y + h * 0.9,
        'L', x, y + h,
        'L', x + w, y + h,
        'L', x + w, y + h * 0.9
      ];
      return path;
    };

    Highcharts.setOptions({
      lang: {
        contextButtonTitle: 'Print and download options',
      }
    });

    Highcharts.chart('highcharts-container', {
      chart: {
        type: 'sankey',
      },
      plotOptions: {
        sankey: {
          point: {
            events: {
              click: pointClickHandler,
            },
          },
          dataLabels: {
            style: {
              fontSize: "0.8em",
            },
          },
        },
      },
      title: {
        text: "{{ assessment_title }}",
        style: {fontSize: '20px'},
      },
      exporting: {
        buttons: {
          contextButton: {
            symbol: "download",
          },
        },
      },
      accessibility: {
        description: 'Sankey plot for U.S. AON Benefit Tool',
        point: {
          valueDescriptionFormat: '{index}. {point.from} to {point.to}, {point.weight}.',
        },
      },
      tooltip: {
        headerFormat: null,
        formatter: function() {
          const point = this;
          return point.point.tooltipHTML || false;
        },
      },
      series: [{
        keys: ['from', 'to', 'weight'],
        data: {{ sankey_series.data | safe }},
        nodes: {{ sankey_series.nodes | safe }},
        colorByPoint: true,
        colors: ["#AEAEAE"]
      }],
    });
  </script>
{% endmacro %}


{% macro display_sankey(sankey_series, assessment) -%}
  {% include 'includes/highcharts.html' %}

  {% if sankey_series.data == [] %}
    <div class="alert alert-info">
      Please add at least one node to display diagram
    </div>
  {% else %}
    <figure class="highcharts-figure">
      <div id="highcharts-container" />
    </figure>
    {{ add_javascript__highcharts(sankey_series=sankey_series, assessment=assessment) }}
  {% endif %}
{% endmacro %}
